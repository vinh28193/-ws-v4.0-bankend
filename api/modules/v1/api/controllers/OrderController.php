<?php
/**
 * Created by PhpStorm.
 * User: galat
 * Date: 23/02/2019
 * Time: 11:10
 */

namespace api\modules\v1\api\controllers;

use api\modules\v1\api\models\OrderSearchForm;
use api\modules\v1\controllers\AuthController;
use common\models\Customer;
use common\models\db\Order;
use Yii;
use yii\db\ActiveQuery;

class OrderController extends AuthController
{
    /** @var Customer $user */
    public  $user;

    public function beforeAction($action)
    {
        $parent = parent::beforeAction($action);
        $this->user = Yii::$app->user->getIdentity();
        return $parent; // TODO: Change the autogenerated stub
    }

    public function actionIndex($actionName){
        /****
         * Todo Log Activity All Action In RestController login or request
         */
        if(isset($this->post['action'])){

        }
        print_r($this->post);
        print_r($actionName);
        print_r(\Yii::$app->user->getIdentity());
        die;
    }

    public function actionView(){
//        $actionName = isset($this->get['actionKey']) && $this->get['actionKey'] ? $this->get['actionKey'] : '';
//        switch ($actionName){
//            case 'get-list-order':
//
//        }
        $search = new OrderSearchForm();
        $data = $this->searchOrder($search);
        return $this->response(true,'get success!',(array)$data,count($data));
    }

    /**
     * @param OrderSearchForm $searchForm
     * @return array|Order
     */
    private function searchOrder($searchForm){
        if(!$this->user){
            return [];
        }
        $query = Order::find()
            ->with([
                'products',
                'orderFees',
                'packageItems',
                'walletTransactions',
                'seller',
                'saleSupport' => function ($q) {
                /** @var ActiveQuery $q */
                    $q->select(['username','email','id','status', 'created_at', 'updated_at']);
                }
                ])
            ->where(['<>','remove' , 1]);
        if($this->isCustomer()){
            $query->andWhere(['customer_id' => $this->user->id]);
        }
        if($searchForm->typeSearch && $searchForm->keyword){
            $query->andWhere(['like',$searchForm->typeSearch,$searchForm->keyword]);
        }elseif($searchForm->keyword){
            $query->andWhere(['or',
                ['like', 'id', $searchForm->keyword],
                ['like', 'seller_name', $searchForm->keyword],
                ['like', 'seller_store', $searchForm->keyword],
                ['like', 'portal', $searchForm->keyword],
            ]);
        }
        if($searchForm->typeOrder){
            $query->andWhere(['type_order' => $searchForm->typeOrder]);
        }
        if($searchForm->status){
            $query->andWhere(['current_status' => $searchForm->status]);
        }
        if ($searchForm->timeEnd && $searchForm->timeStart){
            $query->andWhere(['or',
                ['>=', 'created_at', $searchForm->timeStart],
                ['<=', 'created_at', $searchForm->timeEnd]
            ]);
        }
        return $query->orderBy('created_at desc')->limit($searchForm->limit)
            ->offset($searchForm->page* $searchForm->limit - $searchForm->limit)->asArray()->all();
    }
}