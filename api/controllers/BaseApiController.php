<?php
/**
 * Created by PhpStorm.
 * User: vinhs
 * Date: 2019-02-27
 * Time: 17:17
 */

namespace api\controllers;

use common\helpers\WeshopHelper;
use yii\filters\AccessControl;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\HttpHeaderAuth;
use yii\filters\auth\QueryParamAuth;
use yii\filters\Cors;


class BaseApiController extends \yii\rest\Controller
{

    public $serializer = 'common\rest\Serializer';

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        // remove authentication filter
        if (isset($behaviors['authenticator'])) {
            unset($behaviors['authenticator']);
        }
        $behaviors['corsFilter'] = [
            'class' => Cors::className(),
        ];
        // re-add authentication filter
        $behaviors['authenticator']['except'] = ['options'];
        $behaviors['authenticator'] = [
            'class' => CompositeAuth::className(),
            'except' => ['options'], // avoid authentication on CORS-pre-flight requests (HTTP OPTIONS method)
            'authMethods' => [
                'httpBearer' => [
                    'class' => HttpBearerAuth::className()
                ],
                'weshopApi' => [
                    'class' => \common\rest\WeshopAuth::className()
                ],
                'httpHeader' => [
                    'class' => HttpHeaderAuth::className(),
                    'header' => 'X-Access-Token'
                ],
                'queryParam' => [
                    'class' => QueryParamAuth::className(),
                ]

            ],
        ];
        $behaviors['accessControl'] = [
            'class' => AccessControl::className(),
            'rules' => $this->rules(),
        ];
        return $behaviors;
    }

    /**
     * Declares the allowed HTTP verbs.
     * Please refer to [[VerbFilter::actions]] on how to declare the allowed verbs.
     * @return array the allowed HTTP verbs.
     */
    public function verbs()
    {
        return parent::verbs(); // TODO: Change the autogenerated stub
    }

    /**
     * Declares the allowed access rule.
     * @return array
     */
    public function rules()
    {
        return [
            [
                'allow' => true,
                'roles' => ['@'],
            ],
        ];
    }

    /**
     * @return array
     */
    public function actions()
    {
        return array_merge(parent::actions(), [
            'options' => [
                'class' => 'yii\rest\OptionsAction',
            ],
        ]);
    }

    public function afterAction($action, $result)
    {
        $result = parent::afterAction($action, $result);
        \Yii::info($result,$action);
        return $result;
    }

    /**
     * @param bool $success
     * @param string $message
     * @param array $data
     * @return array
     */
    public function response($success = true, $message = 'Ok', $data = [])
    {
        return WeshopHelper::response($success, $message, $data);
    }
}