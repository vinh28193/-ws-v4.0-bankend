<?php

namespace api\controllers;


use yii\filters\AccessControl;
use common\models\Order;
use api\behaviours\Verbcheck;
use api\behaviours\Apiauth;

use Yii;

/***Cache Http **/

use yii\caching\DbDependency;
use yii\caching\TagDependency;
use api\controllers\BaseApiController as BaseApi;


class OrderController extends BaseApi
{

    public $page = 1;
    public $limit = 20;

    public function behaviors()
    {

        return [
            'pageCache' => [
                'class' => 'yii\filters\PageCache',
                'only' => ['index'],
                'duration' => 24 * 3600 * 365, // 1 year
                'dependency' => [
                    'class' => 'yii\caching\ChainedDependency',
                    'dependencies' => [
                        new DbDependency(['sql' => 'SELECT MAX(id) FROM `'.Order::tableName().'`'])
                    ]
                ],
            ],
        ];
    }


    protected function rules()
    {
        return [
            [
                'allow' => true,
                'actions' => ['index', 'view', 'create', 'update'],
                'roles' => $this->getAllRoles(true),

            ],
            [
                'allow' => true,
                'actions' => ['view'],
                'roles' => $this->getAllRoles(true),
                'permissions' => ['canView']
            ],
            [
                'allow' => true,
                'actions' => ['create'],
                'roles' => $this->getAllRoles(true, 'user'),
                'permissions' => ['canCreate']
            ],
            [
                'allow' => true,
                'actions' => ['update', 'delete'],
                'roles' => $this->getAllRoles(true, 'user'),
            ],
        ];
    }


    public function verbs()
    {
        return [
            'index' => ['GET', 'POST'],
            'create' => ['POST'],
            'update' => ['PUT'],
            'view' => ['GET'],
            'delete' => ['DELETE']
        ];
    }

    public function actionIndex()
    {
        $response = Order::search($params = '');
        Yii::$app->api->sendSuccessResponse($response);
    }

    public function actionCreate()
    {
        if (isset($this->post) !== null) {
            $model = new Order;
            $model->attributes = $this->post;

            if ($model->save()) {
                /* \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON; \Yii::$app->response->data  =   $model->attributes; */
                Yii::$app->api->sendSuccessResponse($model->attributes);
            } elseif ($model->save() === false) {
                /* \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON; \Yii::$app->response->data  =   $model->errors;  */
                Yii::$app->api->sendFailedResponse("Invalid Record requested", (array)$model->errors);
            }
        } else {
            Yii::$app->api->sendFailedResponse("Invalid Record requested");
        }

    }

    public function actionUpdate($id)
    {
        if ($id !== null) {
            $model = $this->findOrder($id);
            $model->attributes = $this->post;
            /***Todo -  Validate data model ***/
            if ($model->save()) {
                Yii::$app->api->sendSuccessResponse($model->attributes);
            } else {
                Yii::$app->api->sendFailedResponse("Invalid Record requested", (array)$model->errors);
            }
        } else {
            Yii::$app->api->sendFailedResponse("Invalid Record requested");
        }

    }

    public function actionView($id)
    {
        $model = $this->findModel($id);
        Yii::$app->api->sendSuccessResponse($model);
    }

    public function actionDelete($id)
    {

        $model = $this->findModel($id);
        $model->delete();
        Yii::$app->api->sendSuccessResponse($model->attributes);
    }

    protected function findModel($id)
    {
        $model = Order::find()
            ->with([
                'products',
                'promotion',
                'orderFees',
                'packageItems',
                'walletTransactions',
                'seller',
                'saleSupport' => function (\yii\db\ActiveQuery $q) {
                    $q->select(['username', 'email', 'id', 'status', 'created_at', 'created_at']);
                }
            ])
            ->where(['id' => $id]);

        if ($id !== null) {
            return $model->orderBy('created_at desc')->limit($this->limit)->offset($this->page * $this->limit - $this->limit)->asArray()->all();
        } else {
            Yii::$app->api->sendFailedResponse("Invalid Record requested");
        }
    }

    protected function findOrder($id)
    {
        if (($model = Order::findOne($id)) !== null) {
            return $model;
        } else {
            Yii::$app->api->sendFailedResponse("Invalid Record requested");
        }
    }


}
