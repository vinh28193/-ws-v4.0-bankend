<?php


namespace frontend\modules\account\controllers;


use frontend\modules\payment\Payment;
use frontend\modules\payment\providers\wallet\WalletService;
use yii\helpers\ArrayHelper;

class WalletController extends BaseAccountController
{

    public function beforeAction($action)
    {
        $before = parent::beforeAction($action); // TODO: Change the autogenerated stub
        if(WalletService::isGuest()){
            return \Yii::$app->response->redirect('/my-weshop.html');
        }else{
            return $before;
        }
    }

    public function actionIndex(){
        $walletS = new WalletService();
        $wallet = ArrayHelper::getValue($walletS->detailWalletClient(),'data',[]);
        return $this->render('index',[
            'wallet' => $wallet,
        ]);
    }
    public function actionTopUp(){
        $payment = new Payment([
            'page' => Payment::PAGE_TOP_UP,
        ]);
        $payment->initDefaultMethod();
        return $this->render('top-up',[
            'payment' => $payment
        ]);
    }
    public function actionDetail($transaction_code){
        $walletS = new WalletService();
        $walletS->transaction_code = $transaction_code;
        $tran = ArrayHelper::getValue($walletS->transactionDetail(),'data',[]);
        return $this->render('detail',[
            'transaction_code' => $transaction_code,
            'transactionDetail' => ArrayHelper::getValue($tran,'transactionInfo'),
        ]);
    }
    public function actionWithdraw(){
        $walletS = new WalletService();
        $wallet = ArrayHelper::getValue($walletS->detailWalletClient(),'data',[]);
        return $this->render('withdraw',[
            'wallet' => $wallet
        ]);
    }
    public function actionHistory(){
        $get = \Yii::$app->request->get();
        $page = \Yii::$app->request->get('page',1);
        $limit = \Yii::$app->request->get('limit',20);
        $walletS = new WalletService();
        $wallet = ArrayHelper::getValue($walletS->detailWalletClient(),'data',[]);
        $offset = $page * $limit - $limit;
        $rs = $walletS->listTransaction($get,$limit,$offset);
        $listTransaction = ArrayHelper::getValue($rs,'data',[]);
        $total = ArrayHelper::getValue($rs,'total',[]);

        return $this->render('history',[
            'wallet' => $wallet,
            'trans' => $listTransaction,
            'total' => $total,
        ]);
    }
}