<?php


namespace common\data;

use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Inflector;
use yii\web\Request;
use yii\helpers\Html;

class Filter extends \yii\base\BaseObject
{

    /**
     * @var bool whether the sorting can be applied to multiple value.
     * Defaults to `false`, which means each time the data can only one
     */
    public $multiple = false;

    /**
     * @var string
     */
    public $filterParam = 'filter';

    /**
     * @var string the route of the controller action for displaying the sorted contents.
     * If not set, it means using the currently requested route.
     */
    public $route;
    /**
     * @var string the character used to separate different attributes that need to be sorted by.
     */
    public $separator = ',';
    /**
     * @var \yii\web\UrlManager the URL manager used for creating sort URLs. If not set,
     * the `urlManager` application component will be used.
     */
    public $urlManager;

    /**
     * @var array parameters (name => value) that should be used to obtain the current query param directions
     * and to create new param URLs. If not set, `$_GET` will be used instead.
     */
    public $params;

    /**
     * @var array
     */
    public $defaultFilter = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    private $_filterValues = [];

    public function getFilterValues($refresh = false)
    {
        if ($this->_filterValues === null || $refresh) {
            $this->_filterValues = [];
            if (($params = $this->params) === null) {
                $request = Yii::$app->getRequest();
                $params = $request instanceof Request ? $request->getQueryParams() : [];
            }
            if (isset($params[$this->filterParam])) {
                foreach ($this->parseFilterValues($params[$this->filterParam]) as $value) {

                    $this->_filterValues[] = $value;
                }
            }
            if (empty($this->_filterValues) && is_array($this->defaultFilter)) {
                $this->_filterValues = $this->defaultFilter;
            }
        }
        return $this->_filterValues;

    }

    public function getFilterValue($value)
    {
        $values = array_values($this->getFilterValues());
        return isset($values[$value]) ? $values[$value] : null;
    }

    protected function parseFilterValues($values)
    {
        return is_scalar($values) ? explode($this->separator, $values) : [];
    }

    public function createFilterParam($value)
    {
        if ($this->multiple) {
            $directions = $this->getFilterValues();
            $directions[] = $value;
            return implode($this->separator, $directions);
        } else {
            return $value;
        }
    }

    public function createUrl($value, $absolute = false)
    {
        if (($params = $this->params) === null) {
            $request = Yii::$app->getRequest();
            $params = $request instanceof Request ? $request->getQueryParams() : [];
        }
        $params[$this->filterParam] = $this->createFilterParam($value);
        $params[0] = $this->route === null ? Yii::$app->controller->getRoute() : $this->route;
        $urlManager = $this->urlManager === null ? Yii::$app->getUrlManager() : $this->urlManager;
        if ($absolute) {
            return $urlManager->createAbsoluteUrl($params);
        }

        return $urlManager->createUrl($params);
    }

    public function filterBox($value, $options = [])
    {
        $checked = false;
        if (($direction = $this->getFilterValue($value)) !== null) {
            $checked = true;
        }

        $options['data-filter'] = $this->createFilterParam($value);

        if (isset($options['label'])) {
            $label = $options['label'];
            unset($options['label']);
        } else {
            $label = Inflector::camel2words($value);
        }
        $checkBoxOptions = isset($options['checkBoxOptions']) ? $options['checkBoxOptions'] : [];
        $checkBoxOptions = ArrayHelper::merge([
            'class' => 'form-check-input'
        ], $checkBoxOptions);
        $labelOptions = isset($options['labelOptions']) ? $options['labelOptions'] : [];
        $labelOptions = ArrayHelper::merge([
            'class' => 'form-check-label'
        ], $labelOptions);
        $content = Html::checkbox($this->filterParam, $checked, $checkBoxOptions);
        $content .= Html::label($label, isset($checkBoxOptions['id']) ? $checkBoxOptions['id'] : null, $labelOptions);
        return Html::tag('div', $content, $options);
    }
}