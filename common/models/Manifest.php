<?php
/**
 * Created by PhpStorm.
 * User: galat
 * Date: 06/03/2019
 * Time: 17:02
 */

namespace common\models;
use common\models\db\Package;

/**
 * Class Manifest
 * @package common\models
 * @property Package[] $packages
 */

class Manifest extends  \common\models\db\Manifest
{
    const STATUS_ACTIVE = 1;
    const STATUS_DELETED = 0;

    public function rules()
    {
        $paren = parent::rules();
        $child = [
            ['active', 'default', 'value' => self::STATUS_ACTIVE],
            ['active', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_DELETED]],
        ];
        return array_merge($paren,$child); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord){
            $this->created_at = time();
            $this->created_by = \Yii::$app->user->getId();
        }
        $this->updated_at = time();
        $this->updated_by = \Yii::$app->user->getId();
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @return Manifest|null
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id, 'active' => self::STATUS_ACTIVE]);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPackages()
    {
        return $this->hasMany(Package::className(), ['manifest_code' => 'manifest_code'])->where(['remove' => 0]);
    }
}