<?php
/**
 * Created by PhpStorm.
 * User: vinhs
 * Date: 2019-03-28
 * Time: 09:03
 */

namespace common\components\log;

use Yii;

/**
 *  use 3 ways:
 *  1 .Logging::create()->product->push($action, $message, $request, $response)
 *  2. (new Logging())->product->push($action, $message, $request, $response)
 *  3. config as application component:
 *      components => [
 *          'wsLog' => [
 *                 'class' => Logging::className,
 *                  'drivers' => [
 *                      // config driver here
 *                  ]
 *          ],
 *
 *   ]
 * Class Logging
 * @property $drivers array
 * @package common\components\log
 */
class Logging extends \yii\base\Component
{
    /**
     * @var array|LoggingDriverInterface[]
     */
    public $_drivers = [
        'file' => [
            'class' =>  'common\components\log\driver\SaveFileLog',
            'filePath' => '@common/components/log/data'

        ],
        'product' => [
            'class' => 'common\components\log\driver\MongoLog',
            'type' => 'Product'
        ],
        'order' => [
            'class' => 'common\components\log\driver\MongoLog',
            'type' => 'Order'
        ],
        'payment' => [
            'class' => 'common\components\log\driver\PaymentLog',
        ]
    ];

    /**
     * @throws \yii\base\InvalidConfigException
     */
    public function init()
    {
        parent::init();
        foreach ($this->drivers as $name => $config) {
            $this->setDriver($name, $config);
        }

    }

    /**
     * create object
     * @param $config
     * @return object
     * @throws \yii\base\InvalidConfigException
     */
    protected function createObject($config)
    {
        return Yii::createObject($config);
    }


    /**
     * get a driver
     * @param $name string
     * @return LoggingDriverInterface|null
     */
    public function getDriver($name)
    {
        return isset($this->_drivers[$name]) ? $this->_drivers[$name] : null;
    }

    /**
     * set a driver
     * @param $name string
     * @param $config string|array|LoggingDriverInterface
     * @throws \yii\base\InvalidConfigException
     */
    public function setDriver($name, $config)
    {
        if (is_array($config) || is_string($config)) {
            $config = $this->createObject($config);
        }
        if ($config instanceof LoggingDriverInterface) {
            $this->_drivers[$name] = $config;
        } else {
            Yii::warning("can not set: " . get_class($config) . " not instanceof LoggingDriverInterface");
        }
    }

    /**
     * set drivers
     * @param $drivers string|array
     * @throws \yii\base\InvalidConfigException
     */
    public function setDrivers($drivers)
    {
        foreach ($drivers as $name => $config) {
            if (is_array($config) || is_string($config)) {
                $config = $this->createObject($config);
            }
            if (!$config instanceof LoggingDriverInterface) {
                continue;
            }
            $this->_drivers[$name] = $config;
        }
    }

    /**
     * get drivers
     * @return array|LoggingDriverInterface[]
     */
    public function getDrivers()
    {
        return $this->_drivers;
    }


    /**
     * php magic get
     * @param string $name
     * @return mixed
     * @throws \yii\base\UnknownPropertyException
     */
    public function __get($name)
    {
        if (isset($this->drivers[$name])) {
            return $this->drivers[$name];
        }
        return parent::__get($name);
    }

    /**
     * php magic set
     * @param string $name
     * @param mixed $value
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\base\UnknownPropertyException
     */
    public function __set($name, $value)
    {
        if (isset($this->_drivers[$name])) {
            if (is_array($value) || is_string($value)) {
                $value = Yii::createObject($value);
            }
            $this->_drivers[$name] = $value;
        }
        return parent::__set($name, $value); // TODO: Change the autogenerated stub
    }

    /**
     * php magic method isset
     * @param string $name
     * @return bool
     */
    public function __isset($name)
    {
        return isset($this->_drivers[$name]) || parent::__isset($name);
    }


    /**
     * call an object instance
     * @return object
     * @throws \yii\base\InvalidConfigException
     */
    public static function create()
    {
        return Yii::createObject(get_called_class());
    }
}