<?php
/**
 * Created by PhpStorm.
 * User: vinhs
 * Date: 2019-02-22
 * Time: 13:27
 */

namespace common\components\db;

class ActiveRecord extends \yii\db\ActiveRecord
{

    /**
     * @inheritdoc
     * @return array
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $reflector = new \ReflectionClass($this);
        if($reflector->hasProperty('created_time') || $reflector->hasProperty('updated_time')){
            $behaviors['timestamp'] = [
                'class' => \yii\behaviors\TimestampBehavior::class,
                'createdAtAttribute' => $this->hasAttribute('created_at') ? 'updated_at' : false,
                'updatedAtAttribute' => $this->hasAttribute('updated_at') ? 'updated_at' : false,
                'value' => new \yii\db\Expression('NOW()'),
            ];
        }
        if($reflector->hasProperty('created_by') || $reflector->hasProperty('updated_by')){
            $behaviors['timestamp'] = [
                'class' => \yii\behaviors\BlameableBehavior::class,
                'createdAtAttribute' => $this->hasAttribute('created_by') ? 'created_by' : false,
                'updatedAtAttribute' => $this->hasAttribute('updated_by') ? 'updated_by' : false,
                'value' => new \yii\db\Expression('NOW()'),
            ];
        }
        return $behaviors;
    }


    public function formName()
    {
        return parent::formName(); // TODO: Change the autogenerated stub
    }

    public function toArray(array $fields = [], array $expand = [], $recursive = true)
    {
        return parent::toArray($fields, $expand, $recursive);
    }

    /**
     * Determines which fields can be returned by [[toArray()]].
     * This method will first extract the root fields from the given fields.
     * Then it will check the requested root fields against those declared in [[fields()]] and [[extraFields()]]
     * to determine which fields can be returned.
     * @param array $fields the fields being requested for exporting
     * @param array $expand the additional fields being requested for exporting
     * @return array the list of fields to be exported. The array keys are the field names, and the array values
     * are the corresponding object property names or PHP callables returning the field values.
     */
    protected function resolveFields(array $fields, array $expand)
    {

        $fields = $this->extractRootFields($fields);
        $expand = $this->extractRootFields($expand);

        $result = [];
        foreach ($this->fields() as $field => $definition) {
            if (is_int($field)) {
                $field = $definition;
            }
            if (empty($fields) || in_array($field, $fields, true)) {
                $result[$field] = $definition;
            }
        }
//        if (empty($expand)) {
//            return $result;
//        }

        foreach ($this->extraFields() as $field => $definition) {
            if (is_int($field)) {
                $field = $definition;
            }
            if (empty($expand) || in_array($field, $expand, true)) {
                $result[$field] = $definition;
            }
        }

        return $result;
    }
}