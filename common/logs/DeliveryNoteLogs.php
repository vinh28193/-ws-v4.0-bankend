<?php
namespace common\logs;

use common\models\User;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

class DeliveryNoteLogs extends \common\modelsMongo\DeliveryNoteLogs
{
    const DELIVERY_NOTE_CREATE = 'CREATE';
    const DELIVERY_NOTE_UPDATE = 'UPDATE';
    const DELIVERY_NOTE_REMOVE = 'REMOVE';
    const DELIVERY_NOTE_LEFT_PACKAGE = 'LEFT_PACKAGE';
    const DELIVERY_NOTE_ADD_PACKAGE = 'ADD_PACKAGE';
    const DELIVERY_NOTE_CREATE_SHIPMENT = 'CREATE_SHIPMENT';
    const DELIVERY_NOTE_MERGE = 'MERGE';


    public function save($runValidation = true, $attributeNames = null)
    {
        try{
            $this->created_at = date('Y-m-d H:i:s');
            $this->user_name = 'guest';
            /** @var User $user */
            $user = \Yii::$app->user->getIdentity();
            if($user){
                $this->user_name = $user->username;
                $this->user_id = $user->id;
                $this->user_email = $user->email;
            }
            return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
        }catch (\Exception $exception){
            \Yii::debug($exception);
            //Todo save to file if mongo error.
//            $fileDirPath = 'file/tracking_logs';
//            if (!file_exists($fileDirPath)) {
//                @mkdir($fileDirPath, 0777, true);
//            }
//            $writer = new Xlsx($spreadsheet);
//            $writer->save($fileName);
            return false;
        }
    }
    public static function GetLogTracking($code){
        $rs = [];
        if($code){
            /** @var self[] $data */
            $data = self::find()->where(['like','delivery_note_code',$code])->orderBy('created_at desc')->all();
            \Yii::debug($data);
            foreach ($data as $datum){
                \Yii::debug($datum->created_at);
                $tmp = new LogViewForm();
                $tmp->create_time = $datum->created_at;
                $tmp->type_log = $datum->getTypeLogText();
                $tmp->user_email = $datum->user_email;
                $tmp->user_name = $datum->user_name;
                $tmp->message = $datum->message_log;
                $tmp->code_reference = $datum->getCodeReferent();
                $rs[] = $tmp->getAttributes();
            }
        }
        return $rs;
    }
    public function getCodeReferent(){
        switch ($this->type_log){
            case self::DELIVERY_NOTE_MERGE:
                return 'Tracking: '. $this->delivery_note_code_reference;
                break;
            case self::DELIVERY_NOTE_LEFT_PACKAGE:
            case self::DELIVERY_NOTE_ADD_PACKAGE:
                return 'Tracking: '. $this->package_code_reference;
                break;
            default:
                return '';
                break;
        }
    }
    public function getTypeLogText(){
        switch ($this->type_log){
            case self::DELIVERY_NOTE_MERGE:
                return 'Gộp phiếu giao';
                break;
            case self::DELIVERY_NOTE_LEFT_PACKAGE:
                return 'Bỏ gói khỏi phiếu';
                break;
            case self::DELIVERY_NOTE_REMOVE:
                return 'Xoá';
                break;
            case self::DELIVERY_NOTE_ADD_PACKAGE:
                return 'Thêm gói vào phiếu';
                break;
            case self::DELIVERY_NOTE_CREATE:
                return 'Tạo mới';
                break;
            case self::DELIVERY_NOTE_CREATE_SHIPMENT:
                return 'Tạo vận đơn';
                break;
            case self::DELIVERY_NOTE_UPDATE:
                return 'Cập nhật';
                break;
            default:
                return '';
                break;
        }
    }
}